#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TwitchInfo.Data
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="TwitchTracker")]
	public partial class TwitchViewerAndStreamerDbDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertStreamer(Streamer instance);
    partial void UpdateStreamer(Streamer instance);
    partial void DeleteStreamer(Streamer instance);
    partial void InsertViewer(Viewer instance);
    partial void UpdateViewer(Viewer instance);
    partial void DeleteViewer(Viewer instance);
    #endregion
		
		public TwitchViewerAndStreamerDbDataContext() : 
				base(global::TwitchInfo.Data.Properties.Settings.Default.TwitchTrackerConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public TwitchViewerAndStreamerDbDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TwitchViewerAndStreamerDbDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TwitchViewerAndStreamerDbDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TwitchViewerAndStreamerDbDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Streamer> Streamers
		{
			get
			{
				return this.GetTable<Streamer>();
			}
		}
		
		public System.Data.Linq.Table<Viewer> Viewers
		{
			get
			{
				return this.GetTable<Viewer>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Streamers")]
	public partial class Streamer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _StreamerName;
		
		private int _ViewerId;
		
		private EntityRef<Viewer> _Viewer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnStreamerNameChanging(string value);
    partial void OnStreamerNameChanged();
    partial void OnViewerIdChanging(int value);
    partial void OnViewerIdChanged();
    #endregion
		
		public Streamer()
		{
			this._Viewer = default(EntityRef<Viewer>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StreamerName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string StreamerName
		{
			get
			{
				return this._StreamerName;
			}
			set
			{
				if ((this._StreamerName != value))
				{
					this.OnStreamerNameChanging(value);
					this.SendPropertyChanging();
					this._StreamerName = value;
					this.SendPropertyChanged("StreamerName");
					this.OnStreamerNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ViewerId", DbType="Int NOT NULL")]
		public int ViewerId
		{
			get
			{
				return this._ViewerId;
			}
			set
			{
				if ((this._ViewerId != value))
				{
					if (this._Viewer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnViewerIdChanging(value);
					this.SendPropertyChanging();
					this._ViewerId = value;
					this.SendPropertyChanged("ViewerId");
					this.OnViewerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Viewer_Streamer", Storage="_Viewer", ThisKey="ViewerId", OtherKey="Id", IsForeignKey=true)]
		public Viewer Viewer
		{
			get
			{
				return this._Viewer.Entity;
			}
			set
			{
				Viewer previousValue = this._Viewer.Entity;
				if (((previousValue != value) 
							|| (this._Viewer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Viewer.Entity = null;
						previousValue.Streamers.Remove(this);
					}
					this._Viewer.Entity = value;
					if ((value != null))
					{
						value.Streamers.Add(this);
						this._ViewerId = value.Id;
					}
					else
					{
						this._ViewerId = default(int);
					}
					this.SendPropertyChanged("Viewer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Viewers")]
	public partial class Viewer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _Age;
		
		private bool _AuthorizedForMature;
		
		private EntitySet<Streamer> _Streamers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnAgeChanging(string value);
    partial void OnAgeChanged();
    partial void OnAuthorizedForMatureChanging(bool value);
    partial void OnAuthorizedForMatureChanged();
    #endregion
		
		public Viewer()
		{
			this._Streamers = new EntitySet<Streamer>(new Action<Streamer>(this.attach_Streamers), new Action<Streamer>(this.detach_Streamers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="VarChar(50)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Age", DbType="VarChar(50)")]
		public string Age
		{
			get
			{
				return this._Age;
			}
			set
			{
				if ((this._Age != value))
				{
					this.OnAgeChanging(value);
					this.SendPropertyChanging();
					this._Age = value;
					this.SendPropertyChanged("Age");
					this.OnAgeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AuthorizedForMature", DbType="Bit NOT NULL")]
		public bool AuthorizedForMature
		{
			get
			{
				return this._AuthorizedForMature;
			}
			set
			{
				if ((this._AuthorizedForMature != value))
				{
					this.OnAuthorizedForMatureChanging(value);
					this.SendPropertyChanging();
					this._AuthorizedForMature = value;
					this.SendPropertyChanged("AuthorizedForMature");
					this.OnAuthorizedForMatureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Viewer_Streamer", Storage="_Streamers", ThisKey="Id", OtherKey="ViewerId")]
		public EntitySet<Streamer> Streamers
		{
			get
			{
				return this._Streamers;
			}
			set
			{
				this._Streamers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Streamers(Streamer entity)
		{
			this.SendPropertyChanging();
			entity.Viewer = this;
		}
		
		private void detach_Streamers(Streamer entity)
		{
			this.SendPropertyChanging();
			entity.Viewer = null;
		}
	}
}
#pragma warning restore 1591
